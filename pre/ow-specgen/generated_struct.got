package {{.Package}}

/* WARNING: GENERATED CODE
 *
 * This file is generated by ow-specgen using metadata from {{.Filename}}
 * 
 * Don't edit this file. Edit {{.Filename}} instead!
 */
import (
//  "fmt"
  "github.com/flowmatters/openwater-core/sim"
  "github.com/flowmatters/openwater-core/data"
)

{{if .Flags.GenerateStruct}}
type {{.Name}} struct {
  {{range $v := .ParameterSpecs -}}
  {{$v.Name}} data.ND{{$v.Dimensionality}}Float64
  {{end}}
}

func (m *{{.Name}}) ApplyParameters(parameters data.ND2Float64) {
{{if .ParameterSpecs}}
  nSets := parameters.Len(sim.DIMP_CELL)
  var newShape []int
  paramIdx := 0
  paramSize := 1
{{end}}

  {{range $i, $v := .ParameterSpecs -}}
  paramSize = 1
    {{- if $v.Dimensions -}}
      {{- range $d := $v.Dimensions -}}
   + int(m.{{$d}}.Maximum())
      {{- end}}
    {{- end}}
  newShape = []int{
    {{- if $v.Dimensions -}}
      {{- range $d := $v.Dimensions -}}
   int(m.{{$d}}.Maximum()),
      {{- end}}
    {{- end}} nSets}

  m.{{$v.Name}} = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND{{$v.Dimensionality}}Float64)
  paramIdx += paramSize

  {{end}}
}
{{end}}

func build{{.Name}}() sim.TimeSteppingModel {
	result := {{.Name}}{}
	return &result
}

func init() {
	sim.Catalog["{{.Name}}"] = build{{.Name}}
}

func (m *{{.Name}})  Description() sim.ModelDescription{
	var result sim.ModelDescription
	result.Parameters = []sim.ParameterDescription{
  {{range $v := .ParameterSpecs }}
  sim.DescribeParameter("{{$v.Name}}",{{$v.Default}},"{{$v.Description}}",[]float64{ {{index $v.Range 0}}, {{index $v.Range 1}} },"{{$v.Units}}"),
  {{- end -}} }

  result.Inputs = []string{
  {{range $k,$v := .Inputs }}"{{$v.Key}}",{{- end -}} }
  result.Outputs = []string{
  {{range $k,$v := .Outputs }}"{{$v.Key}}",{{- end -}} }

  result.States = []string{
  {{range $k,$v := .States }}"{{$v.Key}}",{{- end -}} }

	return result
}

{{if .Flags.GenerateInit}}
func (m *{{.Name}}) InitialiseStates(n int) data.ND2Float64 {
	var result data.ND2Float64 = nil

  {{range $i, $v := .Parameters}}
  {{lower $v.Key}}Len := m.{{$v.Key}}.Shape()[0]
  {{end}}

	for i := 0; i < n; i++ {
    {{range $i, $v := .Parameters}}
		{{lower $v.Key}} := m.{{$v.Key}}.Get1(i%{{lower $v.Key}}Len)
    {{end}}

		states := {{.InitFunc}}({{range $i, $v := .Parameters}}{{lower $v.Key}},{{end}})

    if result==nil {
      result = data.NewArray2DFloat64(n,states.Len(1))
    }
    result.ApplySlice([]int{i,0},[]int{1,1},states)
	}
 
	return result
}
{{end}}

{{if .Flags.ZeroStates}}
func (m *{{.Name}}) InitialiseStates(n int) data.ND2Float64 {
  // Zero states
	var result = data.NewArray2DFloat64(n,{{len .States}})

	// for i := 0; i < n; i++ {
  //   stateSet := make(sim.StateSet,{{len .States}})
  //   {{range $i, $v := .States}}
	// 	stateSet[{{$i}}] = 0 // {{$v.Key}}
  //   {{end}}

  //   if result==nil {
  //     result = data.NewArray2DFloat64(stateSet.Len(0),n)
  //   }
  //   result.Apply([]int{0,i},[]int{1,1},stateSet)
	// }
 
	return result
}
{{end}}

{{if .Flags.GenerateVector}}
func (m *{{.Name}}) Run(inputs data.ND3Float64, states data.ND2Float64, outputs data.ND3Float64) {

  // Loop over all cells
  inputDims := inputs.Shape()
  numCells := states.Len(sim.DIMS_CELL)
  numStates := states.Len(sim.DIMS_STATE)
  numInputSequences := inputs.Len(sim.DIMI_CELL)

  //  fmt.Println("num cells",lenStates,"num states",numStates)
  // fmt.Println("states shape",states.Shape())
  // fmt.Println("states",states) 
  inputLen := inputDims[sim.DIMI_TIMESTEP]
  cellInputsShape := inputDims[1:]
  inputNewShape := []int{inputLen}

//  outputPosSlice := outputs.NewIndex(0)
  outputStepSlice := outputs.NewIndex(1)
  outputSizeSlice := outputs.NewIndex(1)
  outputSizeSlice[sim.DIMO_TIMESTEP] = inputLen

//  statesPosSlice := states.NewIndex(0)
  statesSizeSlice := states.NewIndex(1)
  statesSizeSlice[sim.DIMS_STATE] = numStates

//  inputsPosSlice := inputs.NewIndex(0)
  inputsSizeSlice := inputs.NewIndex(1)
  inputsSizeSlice[sim.DIMI_INPUT] = inputDims[sim.DIMI_INPUT]
  inputsSizeSlice[sim.DIMI_TIMESTEP] = inputLen

//  var result sim.RunResults
//	result.Outputs = data.NewArray3DFloat64( {{len .Outputs}}, inputLen, numCells)
//	result.States = states  //clone? make([]sim.StateSet, len(states))

  doneChan := make(chan int)
  // fmt.Println("Running {{.Name}} for ",numCells,"cells")
//  for i := 0; i < numCells; i++ {
  for j := 0; j < numCells; j++ {
    go func(i int){
      outputPosSlice := outputs.NewIndex(0)
      statesPosSlice := states.NewIndex(0)
      inputsPosSlice := inputs.NewIndex(0)

      outputPosSlice[sim.DIMO_CELL] = i
      statesPosSlice[sim.DIMS_CELL] = i
      inputsPosSlice[sim.DIMI_CELL] = i%numInputSequences

      {{range $i, $v := .ParameterSpecs}}
      // fmt.Println("{{$v.Name}}=",m.{{$v.Name}})
      {{if $v.Dimensions}}
      {{lower $v.Name}}Shape := m.{{$v.Name}}.Shape()
      {{lower $v.Name}}NSets := {{lower $v.Name}}Shape[len({{lower $v.Name}}Shape)-1]
      {{lower $v.Name}}From := []int{ {{range $d := $v.Dimensions}} 0, {{end}} i%{{lower $v.Name}}NSets }
      {{lower $v.Name}}SliceShape := []int{ {{range $d := $v.Dimensions}} int(m.{{ $d }}.Maximum()), {{end}} }
      {{lower $v.Name}} := m.{{$v.Name}}.Slice({{lower $v.Name}}From, {{lower $v.Name}}SliceShape, nil).(data.ND{{len $v.Dimensions}}Float64)
      {{else}}
      {{if $v.IsDimension}}
      // Dimension parameter
      {{lower $v.Name}} := int(m.{{$v.Name}}.Get1(i%m.{{$v.Name}}.Len1()))
      {{else}}
      {{lower $v.Name}} := m.{{$v.Name}}.Get1(i%m.{{$v.Name}}.Len1())
      {{end}}
      {{end}}
      {{end}}

      // fmt.Println("i",i)
      // fmt.Println("States",states.Shape())
      // fmt.Println("Tmp2",tmp2.Shape())
      {{if len .States}}
      initialStates := states.Slice(statesPosSlice,statesSizeSlice,nil).MustReshape([]int{numStates}).(data.ND1Float64)
      {{end}}

      {{if .Flags.GenerateExtractStates}}
      {{range $i, $v := .States}}
      {{lower $v.Key}} := initialStates.Get1({{$i}})
      {{end}}
      {{else}}
      {{range $i, $v := .States}}{{if $i}},{{end}}{{lower $v.Key}}{{end}} := {{.ExtractStatesFunc}}(initialStates)
      {{end}}

  //    fmt.Println("is",inputDims,"tmpShape",tmpCI.Shape(),"cis",cellInputsShape)

      cellInputs := inputs.Slice(inputsPosSlice,inputsSizeSlice,nil).MustReshape(cellInputsShape)
  //    fmt.Println("cellInputs Shape",cellInputs.Shape())
      {{range $i, $v := .Inputs}}
  //    fmt.Println("{{$v}}",tmpTS.Shape())
      {{lower $v.Key}} := cellInputs.Slice([]int{ {{$i}},0}, []int{ 1,inputLen}, nil).MustReshape(inputNewShape).(data.ND1Float64)
      {{end}}

      {{ $oAsP := .Flags.PassOutputsAsParams}}

      {{if $oAsP}}
      {{range $i, $v := .Outputs}}
      outputPosSlice[sim.DIMO_OUTPUT] = {{$i}}
      {{lower $v.Key}} := outputs.Slice(outputPosSlice,outputSizeSlice,outputStepSlice).MustReshape([]int{inputLen}).(data.ND1Float64)
      {{end}}
      {{end}}

      {{if not $oAsP}}
      {{range $i, $v := .Outputs}}{{if $i}},{{end}}{{lower $v.Key}}{{end}}
      {{- end}}
      {{- range $i, $v := .States}}{{if or $i (not $oAsP)}},{{end}}{{lower $v.Key}}{{end}}{{ if $oAsP }}{{if len .States}}={{end}}{{else}}:={{end}} {{.SingleFunc}}(
        {{- range .Inputs}}{{lower .Key}},{{end -}}
        {{- range .States}}{{lower .Key}},{{end -}}
        {{- range .ParameterSpecs}}{{lower .Name}},{{end -}}
        {{- if $oAsP}}
        {{- range $i, $v := .Outputs}}{{if $i}},{{end}}{{lower $v.Key}}{{end}}
        {{- end}})

      {{if .Flags.GenerateExtractStates}}
      {{range $i, $v := .States}}
      initialStates.Set1({{$i}}, {{lower $v.Key}})
      {{end}}
      {{else}}
      // TODO Retrieve states
      states.ApplySlice([]int{i,0},[]int{0,1},{{.PackStatsFunc}}({{range $i, $v := .States}}{{if $i}},{{end}}{{lower $v.Key}}{{end}}))
      {{end}}

  //		result.Outputs.ApplySpice([]int{i,0,0},[]int = make([]sim.Series, {{len .Outputs}})
      {{if not $oAsP}}
      {{range $i,$v := .Outputs -}}
      {{lower $v.Key}}Reshaped := {{lower $v.Key}}.MustReshape([]int{1,{{lower $v.Key}}.Len1(),1})
  //    fmt.Println(result.Outputs.Shape(),{{lower $v.Key}}Reshaped.Shape())
      outputPosSlice[sim.DIMO_OUTPUT] = {{$i}}
      outputs.ApplySlice(outputPosSlice,outputStepSlice,
                                {{lower $v.Key}}Reshaped)
      {{end}}

      {{end}}

      doneChan <- i
    }(j)
	}

  for j := 0; j < numCells; j++ {
    <- doneChan
  }
//	return result
}
{{end}}