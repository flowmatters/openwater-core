package routing

/* WARNING: GENERATED CODE
 *
 * This file is generated by ow-specgen using metadata from ./models/routing/storage_routing.go
 * 
 * Don't edit this file. Edit ./models/routing/storage_routing.go instead!
 */
import (
//  "fmt"
  "github.com/flowmatters/openwater-core/sim"
  "github.com/flowmatters/openwater-core/data"
)


type StorageRouting struct {
  InflowBias data.ND1Float64
  RoutingConstant data.ND1Float64
  RoutingPower data.ND1Float64
  area data.ND1Float64
  deadStorage data.ND1Float64
  DeltaT data.ND1Float64
  

  
}

func (m *StorageRouting) ApplyParameters(parameters data.ND2Float64) {

  nSets := parameters.Len(sim.DIMP_CELL)
  var newShape []int
  paramIdx := 0
  paramSize := 1


  paramSize = 1
  newShape = []int{ nSets}

  m.InflowBias = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  paramSize = 1
  newShape = []int{ nSets}

  m.RoutingConstant = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  paramSize = 1
  newShape = []int{ nSets}

  m.RoutingPower = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  paramSize = 1
  newShape = []int{ nSets}

  m.area = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  paramSize = 1
  newShape = []int{ nSets}

  m.deadStorage = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  paramSize = 1
  newShape = []int{ nSets}

  m.DeltaT = parameters.Slice([]int{ paramIdx, 0}, []int{ paramSize, nSets}, nil).MustReshape(newShape).(data.ND1Float64)
  paramIdx += paramSize

  
}


func buildStorageRouting() sim.TimeSteppingModel {
	result := StorageRouting{}
	return &result
}

func init() {
	sim.Catalog["StorageRouting"] = buildStorageRouting
}

func (m *StorageRouting)  Description() sim.ModelDescription{
	var result sim.ModelDescription
  
  InflowBiasDims := []string{
      }
  
  RoutingConstantDims := []string{
      }
  
  RoutingPowerDims := []string{
      }
  
  areaDims := []string{
      }
  
  deadStorageDims := []string{
      }
  
  DeltaTDims := []string{
      }
  
	result.Parameters = []sim.ParameterDescription{
  
  sim.DescribeParameter("InflowBias",0,"",[]float64{ 0, 0 },"",InflowBiasDims),
  sim.DescribeParameter("RoutingConstant",0,"",[]float64{ 0, 0 },"",RoutingConstantDims),
  sim.DescribeParameter("RoutingPower",0,"",[]float64{ 0, 0 },"",RoutingPowerDims),
  sim.DescribeParameter("area",0,"",[]float64{ 0, 0 },"",areaDims),
  sim.DescribeParameter("deadStorage",0,"",[]float64{ 0, 0 },"",deadStorageDims),
  sim.DescribeParameter("DeltaT",86400,"Timestep",[]float64{ 1, 86400 }," ",DeltaTDims),}

  result.Inputs = []string{
  "inflow","lateral","rainfall","evap",}
  result.Outputs = []string{
  "outflow","storage",}

  result.States = []string{
  "S","prevInflow","prevOutflow",}

  result.Dimensions = []string{
      }
	return result
}

func (m *StorageRouting) InitialiseDimensions(dims []int) {
  
}

func (m *StorageRouting) FindDimensions(parameters data.ND2Float64) []int {
  
  return []int{}
  
}




func (m *StorageRouting) InitialiseStates(n int) data.ND2Float64 {
  // Zero states
	var result = data.NewArray2DFloat64(n,3)

	// for i := 0; i < n; i++ {
  //   stateSet := make(sim.StateSet,3)
  //   
	// 	stateSet[0] = 0 // S
  //   
	// 	stateSet[1] = 0 // prevInflow
  //   
	// 	stateSet[2] = 0 // prevOutflow
  //   

  //   if result==nil {
  //     result = data.NewArray2DFloat64(stateSet.Len(0),n)
  //   }
  //   result.Apply([]int{0,i},[]int{1,1},stateSet)
	// }
 
	return result
}



func (m *StorageRouting) Run(inputs data.ND3Float64, states data.ND2Float64, outputs data.ND3Float64) {

  // Loop over all cells
  inputDims := inputs.Shape()
  numCells := states.Len(sim.DIMS_CELL)
  numStates := states.Len(sim.DIMS_STATE)
  numInputSequences := inputs.Len(sim.DIMI_CELL)

  //  fmt.Println("num cells",lenStates,"num states",numStates)
  // fmt.Println("states shape",states.Shape())
  // fmt.Println("states",states) 
  inputLen := inputDims[sim.DIMI_TIMESTEP]
  cellInputsShape := inputDims[1:]
  inputNewShape := []int{inputLen}

//  outputPosSlice := outputs.NewIndex(0)
  outputStepSlice := outputs.NewIndex(1)
  outputSizeSlice := outputs.NewIndex(1)
  outputSizeSlice[sim.DIMO_TIMESTEP] = inputLen

//  statesPosSlice := states.NewIndex(0)
  statesSizeSlice := states.NewIndex(1)
  statesSizeSlice[sim.DIMS_STATE] = numStates

//  inputsPosSlice := inputs.NewIndex(0)
  inputsSizeSlice := inputs.NewIndex(1)
  inputsSizeSlice[sim.DIMI_INPUT] = inputDims[sim.DIMI_INPUT]
  inputsSizeSlice[sim.DIMI_TIMESTEP] = inputLen

//  var result sim.RunResults
//	result.Outputs = data.NewArray3DFloat64( 2, inputLen, numCells)
//	result.States = states  //clone? make([]sim.StateSet, len(states))

  doneChan := make(chan int)
  // fmt.Println("Running StorageRouting for ",numCells,"cells")
//  for i := 0; i < numCells; i++ {
  for j := 0; j < numCells; j++ {
    go func(i int){
      outputPosSlice := outputs.NewIndex(0)
      statesPosSlice := states.NewIndex(0)
      inputsPosSlice := inputs.NewIndex(0)

      outputPosSlice[sim.DIMO_CELL] = i
      statesPosSlice[sim.DIMS_CELL] = i
      inputsPosSlice[sim.DIMI_CELL] = i%numInputSequences

      inflowbias := m.InflowBias.Get1(i%m.InflowBias.Len1())
      routingconstant := m.RoutingConstant.Get1(i%m.RoutingConstant.Len1())
      routingpower := m.RoutingPower.Get1(i%m.RoutingPower.Len1())
      area := m.area.Get1(i%m.area.Len1())
      deadstorage := m.deadStorage.Get1(i%m.deadStorage.Len1())
      deltat := m.DeltaT.Get1(i%m.DeltaT.Len1())
      

      // fmt.Println("i",i)
      // fmt.Println("States",states.Shape())
      // fmt.Println("Tmp2",tmp2.Shape())
      
      initialStates := states.Slice(statesPosSlice,statesSizeSlice,nil).MustReshape([]int{numStates}).(data.ND1Float64)
      

      
      
      s := initialStates.Get1(0)
      
      previnflow := initialStates.Get1(1)
      
      prevoutflow := initialStates.Get1(2)
      
      

  //    fmt.Println("is",inputDims,"tmpShape",tmpCI.Shape(),"cis",cellInputsShape)

      cellInputs := inputs.Slice(inputsPosSlice,inputsSizeSlice,nil).MustReshape(cellInputsShape)
  //    fmt.Println("cellInputs Shape",cellInputs.Shape())
      
  //    fmt.Println("{inflow m^3.s^-1}",tmpTS.Shape())
      inflow := cellInputs.Slice([]int{ 0,0}, []int{ 1,inputLen}, nil).MustReshape(inputNewShape).(data.ND1Float64)
      
  //    fmt.Println("{lateral m^3.s^-1}",tmpTS.Shape())
      lateral := cellInputs.Slice([]int{ 1,0}, []int{ 1,inputLen}, nil).MustReshape(inputNewShape).(data.ND1Float64)
      
  //    fmt.Println("{rainfall mm}",tmpTS.Shape())
      rainfall := cellInputs.Slice([]int{ 2,0}, []int{ 1,inputLen}, nil).MustReshape(inputNewShape).(data.ND1Float64)
      
  //    fmt.Println("{evap mm}",tmpTS.Shape())
      evap := cellInputs.Slice([]int{ 3,0}, []int{ 1,inputLen}, nil).MustReshape(inputNewShape).(data.ND1Float64)
      

      

      
      
      outputPosSlice[sim.DIMO_OUTPUT] = 0
      outflow := outputs.Slice(outputPosSlice,outputSizeSlice,outputStepSlice).MustReshape([]int{inputLen}).(data.ND1Float64)
      
      outputPosSlice[sim.DIMO_OUTPUT] = 1
      storage := outputs.Slice(outputPosSlice,outputSizeSlice,outputStepSlice).MustReshape([]int{inputLen}).(data.ND1Float64)
      
      

      s,previnflow,prevoutflow= storageRouting(inflow,lateral,rainfall,evap,s,previnflow,prevoutflow,inflowbias,routingconstant,routingpower,area,deadstorage,deltat,outflow,storage)

      
      
      initialStates.Set1(0, s)
      
      initialStates.Set1(1, previnflow)
      
      initialStates.Set1(2, prevoutflow)
      
      

  //		result.Outputs.ApplySpice([]int{i,0,0},[]int = make([]sim.Series, 2)
      

      doneChan <- i
    }(j)
	}

  for j := 0; j < numCells; j++ {
    <- doneChan
  }
//	return result
}
